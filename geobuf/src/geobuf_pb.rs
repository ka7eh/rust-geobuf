// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]

//! Generated file from `protos/geobuf.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Data {
    // message fields
    pub keys: ::protobuf::RepeatedField<::std::string::String>,
    dimensions: ::std::option::Option<u32>,
    precision: ::std::option::Option<u32>,
    // message oneof groups
    pub data_type: ::std::option::Option<data::Data_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a Data {
    fn default() -> &'a Data {
        <Data as ::protobuf::Message>::default_instance()
    }
}

impl Data {
    pub fn new() -> Data {
        ::std::default::Default::default()
    }

    // optional uint32 dimensions = 2;

    pub fn get_dimensions(&self) -> u32 {
        self.dimensions.unwrap_or(2u32)
    }

    pub fn clear_dimensions(&mut self) {
        self.dimensions = ::std::option::Option::None;
    }

    pub fn has_dimensions(&self) -> bool {
        self.dimensions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dimensions(&mut self, v: u32) {
        self.dimensions = ::std::option::Option::Some(v);
    }

    // optional uint32 precision = 3;

    pub fn get_precision(&self) -> u32 {
        self.precision.unwrap_or(6u32)
    }

    pub fn clear_precision(&mut self) {
        self.precision = ::std::option::Option::None;
    }

    pub fn has_precision(&self) -> bool {
        self.precision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_precision(&mut self, v: u32) {
        self.precision = ::std::option::Option::Some(v);
    }

    // optional .Data.FeatureCollection feature_collection = 4;

    pub fn get_feature_collection(&self) -> &data::FeatureCollection {
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::feature_collection(ref v)) => v,
            _ => <data::FeatureCollection as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_feature_collection(&mut self) {
        self.data_type = ::std::option::Option::None;
    }

    pub fn has_feature_collection(&self) -> bool {
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::feature_collection(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_feature_collection(&mut self, v: data::FeatureCollection) {
        self.data_type = ::std::option::Option::Some(data::Data_type::feature_collection(v))
    }

    // Mutable pointer to the field.
    pub fn mut_feature_collection(&mut self) -> &mut data::FeatureCollection {
        if let ::std::option::Option::Some(data::Data_type::feature_collection(_)) = self.data_type {
        } else {
            self.data_type = ::std::option::Option::Some(data::Data_type::feature_collection(data::FeatureCollection::new()));
        }
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::feature_collection(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_feature_collection(&mut self) -> data::FeatureCollection {
        if self.has_feature_collection() {
            match self.data_type.take() {
                ::std::option::Option::Some(data::Data_type::feature_collection(v)) => v,
                _ => panic!(),
            }
        } else {
            data::FeatureCollection::new()
        }
    }

    // optional .Data.Feature feature = 5;

    pub fn get_feature(&self) -> &data::Feature {
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::feature(ref v)) => v,
            _ => <data::Feature as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_feature(&mut self) {
        self.data_type = ::std::option::Option::None;
    }

    pub fn has_feature(&self) -> bool {
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::feature(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_feature(&mut self, v: data::Feature) {
        self.data_type = ::std::option::Option::Some(data::Data_type::feature(v))
    }

    // Mutable pointer to the field.
    pub fn mut_feature(&mut self) -> &mut data::Feature {
        if let ::std::option::Option::Some(data::Data_type::feature(_)) = self.data_type {
        } else {
            self.data_type = ::std::option::Option::Some(data::Data_type::feature(data::Feature::new()));
        }
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::feature(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_feature(&mut self) -> data::Feature {
        if self.has_feature() {
            match self.data_type.take() {
                ::std::option::Option::Some(data::Data_type::feature(v)) => v,
                _ => panic!(),
            }
        } else {
            data::Feature::new()
        }
    }

    // optional .Data.Geometry geometry = 6;

    pub fn get_geometry(&self) -> &data::Geometry {
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::geometry(ref v)) => v,
            _ => <data::Geometry as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_geometry(&mut self) {
        self.data_type = ::std::option::Option::None;
    }

    pub fn has_geometry(&self) -> bool {
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::geometry(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_geometry(&mut self, v: data::Geometry) {
        self.data_type = ::std::option::Option::Some(data::Data_type::geometry(v))
    }

    // Mutable pointer to the field.
    pub fn mut_geometry(&mut self) -> &mut data::Geometry {
        if let ::std::option::Option::Some(data::Data_type::geometry(_)) = self.data_type {
        } else {
            self.data_type = ::std::option::Option::Some(data::Data_type::geometry(data::Geometry::new()));
        }
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::geometry(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_geometry(&mut self) -> data::Geometry {
        if self.has_geometry() {
            match self.data_type.take() {
                ::std::option::Option::Some(data::Data_type::geometry(v)) => v,
                _ => panic!(),
            }
        } else {
            data::Geometry::new()
        }
    }
}

impl ::protobuf::Message for Data {
    fn is_initialized(&self) -> bool {
        if let Some(data::Data_type::feature_collection(ref v)) = self.data_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(data::Data_type::feature(ref v)) = self.data_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(data::Data_type::geometry(ref v)) = self.data_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.keys)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.dimensions = ::std::option::Option::Some(is.read_uint32()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.precision = ::std::option::Option::Some(is.read_uint32()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data_type = ::std::option::Option::Some(data::Data_type::feature_collection(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data_type = ::std::option::Option::Some(data::Data_type::feature(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data_type = ::std::option::Option::Some(data::Data_type::geometry(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.keys {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if let Some(v) = self.dimensions {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.precision {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.data_type {
            match v {
                &data::Data_type::feature_collection(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &data::Data_type::feature(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &data::Data_type::geometry(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.keys {
            os.write_string(1, &v)?;
        };
        if let Some(v) = self.dimensions {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.precision {
            os.write_uint32(3, v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.data_type {
            match v {
                &data::Data_type::feature_collection(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &data::Data_type::feature(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &data::Data_type::geometry(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Data {
        Data::new()
    }

    fn default_instance() -> &'static Data {
        static instance: ::protobuf::rt::Lazy<Data> = ::protobuf::rt::Lazy::INIT;
        instance.get(Data::new)
    }
}

impl ::protobuf::Clear for Data {
    fn clear(&mut self) {
        self.keys.clear();
        self.dimensions = ::std::option::Option::None;
        self.precision = ::std::option::Option::None;
        self.data_type = ::std::option::Option::None;
        self.data_type = ::std::option::Option::None;
        self.data_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Data {
}

/// Nested message and enums of message `Data`
pub mod data {

    #[derive(Clone,PartialEq,Debug)]
    pub enum Data_type {
        feature_collection(FeatureCollection),
        feature(Feature),
        geometry(Geometry),
    }

    impl ::protobuf::Oneof for Data_type {
    }
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Feature {
        // message fields
        pub geometry: ::protobuf::SingularPtrField<Geometry>,
        pub values: ::protobuf::RepeatedField<Value>,
        pub properties: ::std::vec::Vec<u32>,
        pub custom_properties: ::std::vec::Vec<u32>,
        // message oneof groups
        pub id_type: ::std::option::Option<feature::Id_type>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a Feature {
        fn default() -> &'a Feature {
            <Feature as ::protobuf::Message>::default_instance()
        }
    }

    impl Feature {
        pub fn new() -> Feature {
            ::std::default::Default::default()
        }

        // optional string id = 11;

        pub fn get_id(&self) -> &str {
            match self.id_type {
                ::std::option::Option::Some(feature::Id_type::id(ref v)) => v,
                _ => "",
            }
        }

        pub fn clear_id(&mut self) {
            self.id_type = ::std::option::Option::None;
        }

        pub fn has_id(&self) -> bool {
            match self.id_type {
                ::std::option::Option::Some(feature::Id_type::id(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_id(&mut self, v: ::std::string::String) {
            self.id_type = ::std::option::Option::Some(feature::Id_type::id(v))
        }

        // Mutable pointer to the field.
        pub fn mut_id(&mut self) -> &mut ::std::string::String {
            if let ::std::option::Option::Some(feature::Id_type::id(_)) = self.id_type {
            } else {
                self.id_type = ::std::option::Option::Some(feature::Id_type::id(::std::string::String::new()));
            }
            match self.id_type {
                ::std::option::Option::Some(feature::Id_type::id(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_id(&mut self) -> ::std::string::String {
            if self.has_id() {
                match self.id_type.take() {
                    ::std::option::Option::Some(feature::Id_type::id(v)) => v,
                    _ => panic!(),
                }
            } else {
                ::std::string::String::new()
            }
        }

        // optional sint64 int_id = 12;

        pub fn get_int_id(&self) -> i64 {
            match self.id_type {
                ::std::option::Option::Some(feature::Id_type::int_id(v)) => v,
                _ => 0,
            }
        }

        pub fn clear_int_id(&mut self) {
            self.id_type = ::std::option::Option::None;
        }

        pub fn has_int_id(&self) -> bool {
            match self.id_type {
                ::std::option::Option::Some(feature::Id_type::int_id(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_int_id(&mut self, v: i64) {
            self.id_type = ::std::option::Option::Some(feature::Id_type::int_id(v))
        }
    }

    impl ::protobuf::Message for Feature {
        fn is_initialized(&self) -> bool {
            if self.geometry.is_none() {
                return false;
            }
            for v in &self.geometry {
                if !v.is_initialized() {
                    return false;
                }
            };
            for v in &self.values {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        ::protobuf::rt::read_singular_message_into::<Geometry, _>(wire_type, is, &mut self.geometry)?;
                    },
                    11 => {
                        if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.id_type = ::std::option::Option::Some(feature::Id_type::id(is.read_string()?));
                    },
                    12 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.id_type = ::std::option::Option::Some(feature::Id_type::int_id(is.read_sint64()?));
                    },
                    13 => {
                        ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.values)?;
                    },
                    14 => {
                        ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.properties)?;
                    },
                    15 => {
                        ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.custom_properties)?;
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.geometry.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
            }
            for value in &self.values {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
            };
            if !self.properties.is_empty() {
                my_size += ::protobuf::rt::vec_packed_varint_size(14, &self.properties);
            }
            if !self.custom_properties.is_empty() {
                my_size += ::protobuf::rt::vec_packed_varint_size(15, &self.custom_properties);
            }
            if let ::std::option::Option::Some(ref v) = self.id_type {
                match v {
                    &feature::Id_type::id(ref v) => {
                        my_size += ::protobuf::rt::string_size(11, &v);
                    },
                    &feature::Id_type::int_id(v) => {
                        my_size += ::protobuf::rt::value_varint_zigzag_size(12, v);
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.geometry.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            for v in &self.values {
                ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
            };
            if !self.properties.is_empty() {
                os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                // TODO: Data size is computed again, it should be cached
                os.write_raw_varint32(::protobuf::rt::vec_packed_varint_data_size(&self.properties))?;
                for v in &self.properties {
                    os.write_uint32_no_tag(*v)?;
                };
            }
            if !self.custom_properties.is_empty() {
                os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                // TODO: Data size is computed again, it should be cached
                os.write_raw_varint32(::protobuf::rt::vec_packed_varint_data_size(&self.custom_properties))?;
                for v in &self.custom_properties {
                    os.write_uint32_no_tag(*v)?;
                };
            }
            if let ::std::option::Option::Some(ref v) = self.id_type {
                match v {
                    &feature::Id_type::id(ref v) => {
                        os.write_string(11, v)?;
                    },
                    &feature::Id_type::int_id(v) => {
                        os.write_sint64(12, v)?;
                    },
                };
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> Feature {
            Feature::new()
        }

        fn default_instance() -> &'static Feature {
            static instance: ::protobuf::rt::Lazy<Feature> = ::protobuf::rt::Lazy::INIT;
            instance.get(Feature::new)
        }
    }

    impl ::protobuf::Clear for Feature {
        fn clear(&mut self) {
            self.geometry.clear();
            self.id_type = ::std::option::Option::None;
            self.id_type = ::std::option::Option::None;
            self.values.clear();
            self.properties.clear();
            self.custom_properties.clear();
            self.unknown_fields.clear();
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Feature {
    }

    /// Nested message and enums of message `Feature`
    pub mod feature {

        #[derive(Clone,PartialEq,Debug)]
        pub enum Id_type {
            id(::std::string::String),
            int_id(i64),
        }

        impl ::protobuf::Oneof for Id_type {
        }
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Geometry {
        // message fields
        field_type: ::std::option::Option<::protobuf::ProtobufEnumOrUnknown<geometry::Type>>,
        pub lengths: ::std::vec::Vec<u32>,
        pub coords: ::std::vec::Vec<i64>,
        pub geometries: ::protobuf::RepeatedField<Geometry>,
        pub values: ::protobuf::RepeatedField<Value>,
        pub custom_properties: ::std::vec::Vec<u32>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a Geometry {
        fn default() -> &'a Geometry {
            <Geometry as ::protobuf::Message>::default_instance()
        }
    }

    impl Geometry {
        pub fn new() -> Geometry {
            ::std::default::Default::default()
        }

        // required .Data.Geometry.Type type = 1;

        pub fn get_field_type(&self) -> geometry::Type {
            match self.field_type {
                Some(e) => e.enum_value_or(geometry::Type::POINT),
                None => geometry::Type::POINT,
            }
        }

        pub fn clear_field_type(&mut self) {
            self.field_type = ::std::option::Option::None;
        }

        pub fn has_field_type(&self) -> bool {
            self.field_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_field_type(&mut self, v: geometry::Type) {
            self.field_type = ::std::option::Option::Some(::protobuf::ProtobufEnumOrUnknown::new(v));
        }
    }

    impl ::protobuf::Message for Geometry {
        fn is_initialized(&self) -> bool {
            if self.field_type.is_none() {
                return false;
            }
            for v in &self.geometries {
                if !v.is_initialized() {
                    return false;
                }
            };
            for v in &self.values {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.field_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    2 => {
                        ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.lengths)?;
                    },
                    3 => {
                        ::protobuf::rt::read_repeated_sint64_into(wire_type, is, &mut self.coords)?;
                    },
                    4 => {
                        ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.geometries)?;
                    },
                    13 => {
                        ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.values)?;
                    },
                    15 => {
                        ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.custom_properties)?;
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.field_type {
                my_size += ::protobuf::rt::enum_or_unknown_size(1, v);
            }
            if !self.lengths.is_empty() {
                my_size += ::protobuf::rt::vec_packed_varint_size(2, &self.lengths);
            }
            if !self.coords.is_empty() {
                my_size += ::protobuf::rt::vec_packed_varint_zigzag_size(3, &self.coords);
            }
            for value in &self.geometries {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
            };
            for value in &self.values {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
            };
            if !self.custom_properties.is_empty() {
                my_size += ::protobuf::rt::vec_packed_varint_size(15, &self.custom_properties);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.field_type {
                os.write_enum(1, ::protobuf::ProtobufEnumOrUnknown::value(&v))?;
            }
            if !self.lengths.is_empty() {
                os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                // TODO: Data size is computed again, it should be cached
                os.write_raw_varint32(::protobuf::rt::vec_packed_varint_data_size(&self.lengths))?;
                for v in &self.lengths {
                    os.write_uint32_no_tag(*v)?;
                };
            }
            if !self.coords.is_empty() {
                os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                // TODO: Data size is computed again, it should be cached
                os.write_raw_varint32(::protobuf::rt::vec_packed_varint_zigzag_data_size(&self.coords))?;
                for v in &self.coords {
                    os.write_sint64_no_tag(*v)?;
                };
            }
            for v in &self.geometries {
                ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            };
            for v in &self.values {
                ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
            };
            if !self.custom_properties.is_empty() {
                os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                // TODO: Data size is computed again, it should be cached
                os.write_raw_varint32(::protobuf::rt::vec_packed_varint_data_size(&self.custom_properties))?;
                for v in &self.custom_properties {
                    os.write_uint32_no_tag(*v)?;
                };
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> Geometry {
            Geometry::new()
        }

        fn default_instance() -> &'static Geometry {
            static instance: ::protobuf::rt::Lazy<Geometry> = ::protobuf::rt::Lazy::INIT;
            instance.get(Geometry::new)
        }
    }

    impl ::protobuf::Clear for Geometry {
        fn clear(&mut self) {
            self.field_type = ::std::option::Option::None;
            self.lengths.clear();
            self.coords.clear();
            self.geometries.clear();
            self.values.clear();
            self.custom_properties.clear();
            self.unknown_fields.clear();
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Geometry {
    }

    /// Nested message and enums of message `Geometry`
    pub mod geometry {
        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        pub enum Type {
            POINT = 0,
            MULTIPOINT = 1,
            LINESTRING = 2,
            MULTILINESTRING = 3,
            POLYGON = 4,
            MULTIPOLYGON = 5,
            GEOMETRYCOLLECTION = 6,
        }

        impl ::protobuf::ProtobufEnum for Type {
            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<Type> {
                match value {
                    0 => ::std::option::Option::Some(Type::POINT),
                    1 => ::std::option::Option::Some(Type::MULTIPOINT),
                    2 => ::std::option::Option::Some(Type::LINESTRING),
                    3 => ::std::option::Option::Some(Type::MULTILINESTRING),
                    4 => ::std::option::Option::Some(Type::POLYGON),
                    5 => ::std::option::Option::Some(Type::MULTIPOLYGON),
                    6 => ::std::option::Option::Some(Type::GEOMETRYCOLLECTION),
                    _ => ::std::option::Option::None
                }
            }

            fn values() -> &'static [Self] {
                static values: &'static [Type] = &[
                    Type::POINT,
                    Type::MULTIPOINT,
                    Type::LINESTRING,
                    Type::MULTILINESTRING,
                    Type::POLYGON,
                    Type::MULTIPOLYGON,
                    Type::GEOMETRYCOLLECTION,
                ];
                values
            }
        }

        impl ::std::default::Default for Type {
            fn default() -> Self {
                Type::POINT
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Type {
        }
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct FeatureCollection {
        // message fields
        pub features: ::protobuf::RepeatedField<Feature>,
        pub values: ::protobuf::RepeatedField<Value>,
        pub custom_properties: ::std::vec::Vec<u32>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a FeatureCollection {
        fn default() -> &'a FeatureCollection {
            <FeatureCollection as ::protobuf::Message>::default_instance()
        }
    }

    impl FeatureCollection {
        pub fn new() -> FeatureCollection {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for FeatureCollection {
        fn is_initialized(&self) -> bool {
            for v in &self.features {
                if !v.is_initialized() {
                    return false;
                }
            };
            for v in &self.values {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.features)?;
                    },
                    13 => {
                        ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.values)?;
                    },
                    15 => {
                        ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.custom_properties)?;
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            for value in &self.features {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
            };
            for value in &self.values {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
            };
            if !self.custom_properties.is_empty() {
                my_size += ::protobuf::rt::vec_packed_varint_size(15, &self.custom_properties);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            for v in &self.features {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            for v in &self.values {
                ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
            };
            if !self.custom_properties.is_empty() {
                os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                // TODO: Data size is computed again, it should be cached
                os.write_raw_varint32(::protobuf::rt::vec_packed_varint_data_size(&self.custom_properties))?;
                for v in &self.custom_properties {
                    os.write_uint32_no_tag(*v)?;
                };
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> FeatureCollection {
            FeatureCollection::new()
        }

        fn default_instance() -> &'static FeatureCollection {
            static instance: ::protobuf::rt::Lazy<FeatureCollection> = ::protobuf::rt::Lazy::INIT;
            instance.get(FeatureCollection::new)
        }
    }

    impl ::protobuf::Clear for FeatureCollection {
        fn clear(&mut self) {
            self.features.clear();
            self.values.clear();
            self.custom_properties.clear();
            self.unknown_fields.clear();
        }
    }

    impl ::protobuf::reflect::ProtobufValue for FeatureCollection {
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Value {
        // message oneof groups
        pub value_type: ::std::option::Option<value::Value_type>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a Value {
        fn default() -> &'a Value {
            <Value as ::protobuf::Message>::default_instance()
        }
    }

    impl Value {
        pub fn new() -> Value {
            ::std::default::Default::default()
        }

        // optional string string_value = 1;

        pub fn get_string_value(&self) -> &str {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::string_value(ref v)) => v,
                _ => "",
            }
        }

        pub fn clear_string_value(&mut self) {
            self.value_type = ::std::option::Option::None;
        }

        pub fn has_string_value(&self) -> bool {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::string_value(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_string_value(&mut self, v: ::std::string::String) {
            self.value_type = ::std::option::Option::Some(value::Value_type::string_value(v))
        }

        // Mutable pointer to the field.
        pub fn mut_string_value(&mut self) -> &mut ::std::string::String {
            if let ::std::option::Option::Some(value::Value_type::string_value(_)) = self.value_type {
            } else {
                self.value_type = ::std::option::Option::Some(value::Value_type::string_value(::std::string::String::new()));
            }
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::string_value(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_string_value(&mut self) -> ::std::string::String {
            if self.has_string_value() {
                match self.value_type.take() {
                    ::std::option::Option::Some(value::Value_type::string_value(v)) => v,
                    _ => panic!(),
                }
            } else {
                ::std::string::String::new()
            }
        }

        // optional double double_value = 2;

        pub fn get_double_value(&self) -> f64 {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::double_value(v)) => v,
                _ => 0.,
            }
        }

        pub fn clear_double_value(&mut self) {
            self.value_type = ::std::option::Option::None;
        }

        pub fn has_double_value(&self) -> bool {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::double_value(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_double_value(&mut self, v: f64) {
            self.value_type = ::std::option::Option::Some(value::Value_type::double_value(v))
        }

        // optional uint64 pos_int_value = 3;

        pub fn get_pos_int_value(&self) -> u64 {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::pos_int_value(v)) => v,
                _ => 0,
            }
        }

        pub fn clear_pos_int_value(&mut self) {
            self.value_type = ::std::option::Option::None;
        }

        pub fn has_pos_int_value(&self) -> bool {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::pos_int_value(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_pos_int_value(&mut self, v: u64) {
            self.value_type = ::std::option::Option::Some(value::Value_type::pos_int_value(v))
        }

        // optional uint64 neg_int_value = 4;

        pub fn get_neg_int_value(&self) -> u64 {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::neg_int_value(v)) => v,
                _ => 0,
            }
        }

        pub fn clear_neg_int_value(&mut self) {
            self.value_type = ::std::option::Option::None;
        }

        pub fn has_neg_int_value(&self) -> bool {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::neg_int_value(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_neg_int_value(&mut self, v: u64) {
            self.value_type = ::std::option::Option::Some(value::Value_type::neg_int_value(v))
        }

        // optional bool bool_value = 5;

        pub fn get_bool_value(&self) -> bool {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::bool_value(v)) => v,
                _ => false,
            }
        }

        pub fn clear_bool_value(&mut self) {
            self.value_type = ::std::option::Option::None;
        }

        pub fn has_bool_value(&self) -> bool {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::bool_value(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_bool_value(&mut self, v: bool) {
            self.value_type = ::std::option::Option::Some(value::Value_type::bool_value(v))
        }

        // optional string json_value = 6;

        pub fn get_json_value(&self) -> &str {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::json_value(ref v)) => v,
                _ => "",
            }
        }

        pub fn clear_json_value(&mut self) {
            self.value_type = ::std::option::Option::None;
        }

        pub fn has_json_value(&self) -> bool {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::json_value(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_json_value(&mut self, v: ::std::string::String) {
            self.value_type = ::std::option::Option::Some(value::Value_type::json_value(v))
        }

        // Mutable pointer to the field.
        pub fn mut_json_value(&mut self) -> &mut ::std::string::String {
            if let ::std::option::Option::Some(value::Value_type::json_value(_)) = self.value_type {
            } else {
                self.value_type = ::std::option::Option::Some(value::Value_type::json_value(::std::string::String::new()));
            }
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::json_value(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_json_value(&mut self) -> ::std::string::String {
            if self.has_json_value() {
                match self.value_type.take() {
                    ::std::option::Option::Some(value::Value_type::json_value(v)) => v,
                    _ => panic!(),
                }
            } else {
                ::std::string::String::new()
            }
        }
    }

    impl ::protobuf::Message for Value {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.value_type = ::std::option::Option::Some(value::Value_type::string_value(is.read_string()?));
                    },
                    2 => {
                        if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.value_type = ::std::option::Option::Some(value::Value_type::double_value(is.read_double()?));
                    },
                    3 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.value_type = ::std::option::Option::Some(value::Value_type::pos_int_value(is.read_uint64()?));
                    },
                    4 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.value_type = ::std::option::Option::Some(value::Value_type::neg_int_value(is.read_uint64()?));
                    },
                    5 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.value_type = ::std::option::Option::Some(value::Value_type::bool_value(is.read_bool()?));
                    },
                    6 => {
                        if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.value_type = ::std::option::Option::Some(value::Value_type::json_value(is.read_string()?));
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.value_type {
                match v {
                    &value::Value_type::string_value(ref v) => {
                        my_size += ::protobuf::rt::string_size(1, &v);
                    },
                    &value::Value_type::double_value(v) => {
                        my_size += 9;
                    },
                    &value::Value_type::pos_int_value(v) => {
                        my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                    },
                    &value::Value_type::neg_int_value(v) => {
                        my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
                    },
                    &value::Value_type::bool_value(v) => {
                        my_size += 2;
                    },
                    &value::Value_type::json_value(ref v) => {
                        my_size += ::protobuf::rt::string_size(6, &v);
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let ::std::option::Option::Some(ref v) = self.value_type {
                match v {
                    &value::Value_type::string_value(ref v) => {
                        os.write_string(1, v)?;
                    },
                    &value::Value_type::double_value(v) => {
                        os.write_double(2, v)?;
                    },
                    &value::Value_type::pos_int_value(v) => {
                        os.write_uint64(3, v)?;
                    },
                    &value::Value_type::neg_int_value(v) => {
                        os.write_uint64(4, v)?;
                    },
                    &value::Value_type::bool_value(v) => {
                        os.write_bool(5, v)?;
                    },
                    &value::Value_type::json_value(ref v) => {
                        os.write_string(6, v)?;
                    },
                };
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> Value {
            Value::new()
        }

        fn default_instance() -> &'static Value {
            static instance: ::protobuf::rt::Lazy<Value> = ::protobuf::rt::Lazy::INIT;
            instance.get(Value::new)
        }
    }

    impl ::protobuf::Clear for Value {
        fn clear(&mut self) {
            self.value_type = ::std::option::Option::None;
            self.value_type = ::std::option::Option::None;
            self.value_type = ::std::option::Option::None;
            self.value_type = ::std::option::Option::None;
            self.value_type = ::std::option::Option::None;
            self.value_type = ::std::option::Option::None;
            self.unknown_fields.clear();
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Value {
    }

    /// Nested message and enums of message `Value`
    pub mod value {

        #[derive(Clone,PartialEq,Debug)]
        pub enum Value_type {
            string_value(::std::string::String),
            double_value(f64),
            pos_int_value(u64),
            neg_int_value(u64),
            bool_value(bool),
            json_value(::std::string::String),
        }

        impl ::protobuf::Oneof for Value_type {
        }
    }
}
