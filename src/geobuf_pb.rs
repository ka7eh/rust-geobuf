// This file is generated by rust-protobuf 3.0.2. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protos/geobuf.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_2;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Data)
pub struct Data {
    // message fields
    // @@protoc_insertion_point(field:Data.keys)
    pub keys: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:Data.dimensions)
    pub dimensions: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:Data.precision)
    pub precision: ::std::option::Option<u32>,
    // message oneof groups
    pub data_type: ::std::option::Option<data::Data_type>,
    // special fields
    // @@protoc_insertion_point(special_field:Data.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Data {
    fn default() -> &'a Data {
        <Data as ::protobuf::Message>::default_instance()
    }
}

impl Data {
    pub fn new() -> Data {
        ::std::default::Default::default()
    }

    // optional uint32 dimensions = 2;

    pub fn dimensions(&self) -> u32 {
        self.dimensions.unwrap_or(2u32)
    }

    pub fn clear_dimensions(&mut self) {
        self.dimensions = ::std::option::Option::None;
    }

    pub fn has_dimensions(&self) -> bool {
        self.dimensions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dimensions(&mut self, v: u32) {
        self.dimensions = ::std::option::Option::Some(v);
    }

    // optional uint32 precision = 3;

    pub fn precision(&self) -> u32 {
        self.precision.unwrap_or(6u32)
    }

    pub fn clear_precision(&mut self) {
        self.precision = ::std::option::Option::None;
    }

    pub fn has_precision(&self) -> bool {
        self.precision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_precision(&mut self, v: u32) {
        self.precision = ::std::option::Option::Some(v);
    }

    // optional .Data.FeatureCollection feature_collection = 4;

    pub fn feature_collection(&self) -> &data::FeatureCollection {
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::FeatureCollection(ref v)) => v,
            _ => <data::FeatureCollection as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_feature_collection(&mut self) {
        self.data_type = ::std::option::Option::None;
    }

    pub fn has_feature_collection(&self) -> bool {
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::FeatureCollection(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_feature_collection(&mut self, v: data::FeatureCollection) {
        self.data_type = ::std::option::Option::Some(data::Data_type::FeatureCollection(v))
    }

    // Mutable pointer to the field.
    pub fn mut_feature_collection(&mut self) -> &mut data::FeatureCollection {
        if let ::std::option::Option::Some(data::Data_type::FeatureCollection(_)) = self.data_type {
        } else {
            self.data_type = ::std::option::Option::Some(data::Data_type::FeatureCollection(data::FeatureCollection::new()));
        }
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::FeatureCollection(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_feature_collection(&mut self) -> data::FeatureCollection {
        if self.has_feature_collection() {
            match self.data_type.take() {
                ::std::option::Option::Some(data::Data_type::FeatureCollection(v)) => v,
                _ => panic!(),
            }
        } else {
            data::FeatureCollection::new()
        }
    }

    // optional .Data.Feature feature = 5;

    pub fn feature(&self) -> &data::Feature {
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::Feature(ref v)) => v,
            _ => <data::Feature as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_feature(&mut self) {
        self.data_type = ::std::option::Option::None;
    }

    pub fn has_feature(&self) -> bool {
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::Feature(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_feature(&mut self, v: data::Feature) {
        self.data_type = ::std::option::Option::Some(data::Data_type::Feature(v))
    }

    // Mutable pointer to the field.
    pub fn mut_feature(&mut self) -> &mut data::Feature {
        if let ::std::option::Option::Some(data::Data_type::Feature(_)) = self.data_type {
        } else {
            self.data_type = ::std::option::Option::Some(data::Data_type::Feature(data::Feature::new()));
        }
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::Feature(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_feature(&mut self) -> data::Feature {
        if self.has_feature() {
            match self.data_type.take() {
                ::std::option::Option::Some(data::Data_type::Feature(v)) => v,
                _ => panic!(),
            }
        } else {
            data::Feature::new()
        }
    }

    // optional .Data.Geometry geometry = 6;

    pub fn geometry(&self) -> &data::Geometry {
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::Geometry(ref v)) => v,
            _ => <data::Geometry as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_geometry(&mut self) {
        self.data_type = ::std::option::Option::None;
    }

    pub fn has_geometry(&self) -> bool {
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::Geometry(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_geometry(&mut self, v: data::Geometry) {
        self.data_type = ::std::option::Option::Some(data::Data_type::Geometry(v))
    }

    // Mutable pointer to the field.
    pub fn mut_geometry(&mut self) -> &mut data::Geometry {
        if let ::std::option::Option::Some(data::Data_type::Geometry(_)) = self.data_type {
        } else {
            self.data_type = ::std::option::Option::Some(data::Data_type::Geometry(data::Geometry::new()));
        }
        match self.data_type {
            ::std::option::Option::Some(data::Data_type::Geometry(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_geometry(&mut self) -> data::Geometry {
        if self.has_geometry() {
            match self.data_type.take() {
                ::std::option::Option::Some(data::Data_type::Geometry(v)) => v,
                _ => panic!(),
            }
        } else {
            data::Geometry::new()
        }
    }
}

impl ::protobuf::Message for Data {
    const NAME: &'static str = "Data";

    fn is_initialized(&self) -> bool {
        if let Some(data::Data_type::FeatureCollection(ref v)) = self.data_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(data::Data_type::Feature(ref v)) = self.data_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(data::Data_type::Geometry(ref v)) = self.data_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.keys.push(is.read_string()?);
                },
                16 => {
                    self.dimensions = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.precision = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.data_type = ::std::option::Option::Some(data::Data_type::FeatureCollection(is.read_message()?));
                },
                42 => {
                    self.data_type = ::std::option::Option::Some(data::Data_type::Feature(is.read_message()?));
                },
                50 => {
                    self.data_type = ::std::option::Option::Some(data::Data_type::Geometry(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.keys {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if let Some(v) = self.dimensions {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.precision {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let ::std::option::Option::Some(ref v) = self.data_type {
            match v {
                &data::Data_type::FeatureCollection(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &data::Data_type::Feature(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &data::Data_type::Geometry(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.keys {
            os.write_string(1, &v)?;
        };
        if let Some(v) = self.dimensions {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.precision {
            os.write_uint32(3, v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.data_type {
            match v {
                &data::Data_type::FeatureCollection(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &data::Data_type::Feature(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &data::Data_type::Geometry(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Data {
        Data::new()
    }

    fn clear(&mut self) {
        self.keys.clear();
        self.dimensions = ::std::option::Option::None;
        self.precision = ::std::option::Option::None;
        self.data_type = ::std::option::Option::None;
        self.data_type = ::std::option::Option::None;
        self.data_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Data {
        static instance: Data = Data {
            keys: ::std::vec::Vec::new(),
            dimensions: ::std::option::Option::None,
            precision: ::std::option::Option::None,
            data_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `Data`
pub mod data {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:Data.data_type)
    pub enum Data_type {
        // @@protoc_insertion_point(oneof_field:Data.feature_collection)
        FeatureCollection(FeatureCollection),
        // @@protoc_insertion_point(oneof_field:Data.feature)
        Feature(Feature),
        // @@protoc_insertion_point(oneof_field:Data.geometry)
        Geometry(Geometry),
    }

    impl ::protobuf::Oneof for Data_type {
    }

    impl Data_type {
    }
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:Data.Feature)
    pub struct Feature {
        // message fields
        // @@protoc_insertion_point(field:Data.Feature.geometry)
        pub geometry: ::protobuf::MessageField<Geometry>,
        // @@protoc_insertion_point(field:Data.Feature.values)
        pub values: ::std::vec::Vec<Value>,
        // @@protoc_insertion_point(field:Data.Feature.properties)
        pub properties: ::std::vec::Vec<u32>,
        // @@protoc_insertion_point(field:Data.Feature.custom_properties)
        pub custom_properties: ::std::vec::Vec<u32>,
        // message oneof groups
        pub id_type: ::std::option::Option<feature::Id_type>,
        // special fields
        // @@protoc_insertion_point(special_field:Data.Feature.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Feature {
        fn default() -> &'a Feature {
            <Feature as ::protobuf::Message>::default_instance()
        }
    }

    impl Feature {
        pub fn new() -> Feature {
            ::std::default::Default::default()
        }

        // optional string id = 11;

        pub fn id(&self) -> &str {
            match self.id_type {
                ::std::option::Option::Some(feature::Id_type::Id(ref v)) => v,
                _ => "",
            }
        }

        pub fn clear_id(&mut self) {
            self.id_type = ::std::option::Option::None;
        }

        pub fn has_id(&self) -> bool {
            match self.id_type {
                ::std::option::Option::Some(feature::Id_type::Id(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_id(&mut self, v: ::std::string::String) {
            self.id_type = ::std::option::Option::Some(feature::Id_type::Id(v))
        }

        // Mutable pointer to the field.
        pub fn mut_id(&mut self) -> &mut ::std::string::String {
            if let ::std::option::Option::Some(feature::Id_type::Id(_)) = self.id_type {
            } else {
                self.id_type = ::std::option::Option::Some(feature::Id_type::Id(::std::string::String::new()));
            }
            match self.id_type {
                ::std::option::Option::Some(feature::Id_type::Id(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_id(&mut self) -> ::std::string::String {
            if self.has_id() {
                match self.id_type.take() {
                    ::std::option::Option::Some(feature::Id_type::Id(v)) => v,
                    _ => panic!(),
                }
            } else {
                ::std::string::String::new()
            }
        }

        // optional sint64 int_id = 12;

        pub fn int_id(&self) -> i64 {
            match self.id_type {
                ::std::option::Option::Some(feature::Id_type::IntId(v)) => v,
                _ => 0,
            }
        }

        pub fn clear_int_id(&mut self) {
            self.id_type = ::std::option::Option::None;
        }

        pub fn has_int_id(&self) -> bool {
            match self.id_type {
                ::std::option::Option::Some(feature::Id_type::IntId(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_int_id(&mut self, v: i64) {
            self.id_type = ::std::option::Option::Some(feature::Id_type::IntId(v))
        }
    }

    impl ::protobuf::Message for Feature {
        const NAME: &'static str = "Feature";

        fn is_initialized(&self) -> bool {
            if self.geometry.is_none() {
                return false;
            }
            for v in &self.geometry {
                if !v.is_initialized() {
                    return false;
                }
            };
            for v in &self.values {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.geometry)?;
                    },
                    90 => {
                        self.id_type = ::std::option::Option::Some(feature::Id_type::Id(is.read_string()?));
                    },
                    96 => {
                        self.id_type = ::std::option::Option::Some(feature::Id_type::IntId(is.read_sint64()?));
                    },
                    106 => {
                        self.values.push(is.read_message()?);
                    },
                    114 => {
                        is.read_repeated_packed_uint32_into(&mut self.properties)?;
                    },
                    112 => {
                        self.properties.push(is.read_uint32()?);
                    },
                    122 => {
                        is.read_repeated_packed_uint32_into(&mut self.custom_properties)?;
                    },
                    120 => {
                        self.custom_properties.push(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.geometry.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            for value in &self.values {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::vec_packed_uint32_size(14, &self.properties);
            my_size += ::protobuf::rt::vec_packed_uint32_size(15, &self.custom_properties);
            if let ::std::option::Option::Some(ref v) = self.id_type {
                match v {
                    &feature::Id_type::Id(ref v) => {
                        my_size += ::protobuf::rt::string_size(11, &v);
                    },
                    &feature::Id_type::IntId(v) => {
                        my_size += ::protobuf::rt::sint64_size(12, v);
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.geometry.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            for v in &self.values {
                ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
            };
            os.write_repeated_packed_uint32(14, &self.properties)?;
            os.write_repeated_packed_uint32(15, &self.custom_properties)?;
            if let ::std::option::Option::Some(ref v) = self.id_type {
                match v {
                    &feature::Id_type::Id(ref v) => {
                        os.write_string(11, v)?;
                    },
                    &feature::Id_type::IntId(v) => {
                        os.write_sint64(12, v)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Feature {
            Feature::new()
        }

        fn clear(&mut self) {
            self.geometry.clear();
            self.id_type = ::std::option::Option::None;
            self.id_type = ::std::option::Option::None;
            self.values.clear();
            self.properties.clear();
            self.custom_properties.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Feature {
            static instance: Feature = Feature {
                geometry: ::protobuf::MessageField::none(),
                values: ::std::vec::Vec::new(),
                properties: ::std::vec::Vec::new(),
                custom_properties: ::std::vec::Vec::new(),
                id_type: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    /// Nested message and enums of message `Feature`
    pub mod feature {

        #[derive(Clone,PartialEq,Debug)]
        #[non_exhaustive]
        // @@protoc_insertion_point(oneof:Data.Feature.id_type)
        pub enum Id_type {
            // @@protoc_insertion_point(oneof_field:Data.Feature.id)
            Id(::std::string::String),
            // @@protoc_insertion_point(oneof_field:Data.Feature.int_id)
            IntId(i64),
        }

        impl ::protobuf::Oneof for Id_type {
        }

        impl Id_type {
        }
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:Data.Geometry)
    pub struct Geometry {
        // message fields
        // @@protoc_insertion_point(field:Data.Geometry.type)
        pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<geometry::Type>>,
        // @@protoc_insertion_point(field:Data.Geometry.lengths)
        pub lengths: ::std::vec::Vec<u32>,
        // @@protoc_insertion_point(field:Data.Geometry.coords)
        pub coords: ::std::vec::Vec<i64>,
        // @@protoc_insertion_point(field:Data.Geometry.geometries)
        pub geometries: ::std::vec::Vec<Geometry>,
        // @@protoc_insertion_point(field:Data.Geometry.values)
        pub values: ::std::vec::Vec<Value>,
        // @@protoc_insertion_point(field:Data.Geometry.custom_properties)
        pub custom_properties: ::std::vec::Vec<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:Data.Geometry.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Geometry {
        fn default() -> &'a Geometry {
            <Geometry as ::protobuf::Message>::default_instance()
        }
    }

    impl Geometry {
        pub fn new() -> Geometry {
            ::std::default::Default::default()
        }

        // required .Data.Geometry.Type type = 1;

        pub fn type_(&self) -> geometry::Type {
            match self.type_ {
                Some(e) => e.enum_value_or(geometry::Type::POINT),
                None => geometry::Type::POINT,
            }
        }

        pub fn clear_type_(&mut self) {
            self.type_ = ::std::option::Option::None;
        }

        pub fn has_type(&self) -> bool {
            self.type_.is_some()
        }

        // Param is passed by value, moved
        pub fn set_type(&mut self, v: geometry::Type) {
            self.type_ = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
        }
    }

    impl ::protobuf::Message for Geometry {
        const NAME: &'static str = "Geometry";

        fn is_initialized(&self) -> bool {
            if self.type_.is_none() {
                return false;
            }
            for v in &self.geometries {
                if !v.is_initialized() {
                    return false;
                }
            };
            for v in &self.values {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    18 => {
                        is.read_repeated_packed_uint32_into(&mut self.lengths)?;
                    },
                    16 => {
                        self.lengths.push(is.read_uint32()?);
                    },
                    26 => {
                        is.read_repeated_packed_sint64_into(&mut self.coords)?;
                    },
                    24 => {
                        self.coords.push(is.read_sint64()?);
                    },
                    34 => {
                        self.geometries.push(is.read_message()?);
                    },
                    106 => {
                        self.values.push(is.read_message()?);
                    },
                    122 => {
                        is.read_repeated_packed_uint32_into(&mut self.custom_properties)?;
                    },
                    120 => {
                        self.custom_properties.push(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.type_ {
                my_size += ::protobuf::rt::int32_size(1, v.value());
            }
            my_size += ::protobuf::rt::vec_packed_uint32_size(2, &self.lengths);
            my_size += ::protobuf::rt::vec_packed_sint64_size(3, &self.coords);
            for value in &self.geometries {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            for value in &self.values {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::vec_packed_uint32_size(15, &self.custom_properties);
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.type_ {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
            }
            os.write_repeated_packed_uint32(2, &self.lengths)?;
            os.write_repeated_packed_sint64(3, &self.coords)?;
            for v in &self.geometries {
                ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            };
            for v in &self.values {
                ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
            };
            os.write_repeated_packed_uint32(15, &self.custom_properties)?;
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Geometry {
            Geometry::new()
        }

        fn clear(&mut self) {
            self.type_ = ::std::option::Option::None;
            self.lengths.clear();
            self.coords.clear();
            self.geometries.clear();
            self.values.clear();
            self.custom_properties.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Geometry {
            static instance: Geometry = Geometry {
                type_: ::std::option::Option::None,
                lengths: ::std::vec::Vec::new(),
                coords: ::std::vec::Vec::new(),
                geometries: ::std::vec::Vec::new(),
                values: ::std::vec::Vec::new(),
                custom_properties: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    /// Nested message and enums of message `Geometry`
    pub mod geometry {
        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:Data.Geometry.Type)
        pub enum Type {
            // @@protoc_insertion_point(enum_value:Data.Geometry.Type.POINT)
            POINT = 0,
            // @@protoc_insertion_point(enum_value:Data.Geometry.Type.MULTIPOINT)
            MULTIPOINT = 1,
            // @@protoc_insertion_point(enum_value:Data.Geometry.Type.LINESTRING)
            LINESTRING = 2,
            // @@protoc_insertion_point(enum_value:Data.Geometry.Type.MULTILINESTRING)
            MULTILINESTRING = 3,
            // @@protoc_insertion_point(enum_value:Data.Geometry.Type.POLYGON)
            POLYGON = 4,
            // @@protoc_insertion_point(enum_value:Data.Geometry.Type.MULTIPOLYGON)
            MULTIPOLYGON = 5,
            // @@protoc_insertion_point(enum_value:Data.Geometry.Type.GEOMETRYCOLLECTION)
            GEOMETRYCOLLECTION = 6,
        }

        impl ::protobuf::Enum for Type {
            const NAME: &'static str = "Type";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<Type> {
                match value {
                    0 => ::std::option::Option::Some(Type::POINT),
                    1 => ::std::option::Option::Some(Type::MULTIPOINT),
                    2 => ::std::option::Option::Some(Type::LINESTRING),
                    3 => ::std::option::Option::Some(Type::MULTILINESTRING),
                    4 => ::std::option::Option::Some(Type::POLYGON),
                    5 => ::std::option::Option::Some(Type::MULTIPOLYGON),
                    6 => ::std::option::Option::Some(Type::GEOMETRYCOLLECTION),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [Type] = &[
                Type::POINT,
                Type::MULTIPOINT,
                Type::LINESTRING,
                Type::MULTILINESTRING,
                Type::POLYGON,
                Type::MULTIPOLYGON,
                Type::GEOMETRYCOLLECTION,
            ];
        }

        impl ::std::default::Default for Type {
            fn default() -> Self {
                Type::POINT
            }
        }

    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:Data.FeatureCollection)
    pub struct FeatureCollection {
        // message fields
        // @@protoc_insertion_point(field:Data.FeatureCollection.features)
        pub features: ::std::vec::Vec<Feature>,
        // @@protoc_insertion_point(field:Data.FeatureCollection.values)
        pub values: ::std::vec::Vec<Value>,
        // @@protoc_insertion_point(field:Data.FeatureCollection.custom_properties)
        pub custom_properties: ::std::vec::Vec<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:Data.FeatureCollection.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a FeatureCollection {
        fn default() -> &'a FeatureCollection {
            <FeatureCollection as ::protobuf::Message>::default_instance()
        }
    }

    impl FeatureCollection {
        pub fn new() -> FeatureCollection {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for FeatureCollection {
        const NAME: &'static str = "FeatureCollection";

        fn is_initialized(&self) -> bool {
            for v in &self.features {
                if !v.is_initialized() {
                    return false;
                }
            };
            for v in &self.values {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.features.push(is.read_message()?);
                    },
                    106 => {
                        self.values.push(is.read_message()?);
                    },
                    122 => {
                        is.read_repeated_packed_uint32_into(&mut self.custom_properties)?;
                    },
                    120 => {
                        self.custom_properties.push(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.features {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            for value in &self.values {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::vec_packed_uint32_size(15, &self.custom_properties);
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.features {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            for v in &self.values {
                ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
            };
            os.write_repeated_packed_uint32(15, &self.custom_properties)?;
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> FeatureCollection {
            FeatureCollection::new()
        }

        fn clear(&mut self) {
            self.features.clear();
            self.values.clear();
            self.custom_properties.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static FeatureCollection {
            static instance: FeatureCollection = FeatureCollection {
                features: ::std::vec::Vec::new(),
                values: ::std::vec::Vec::new(),
                custom_properties: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:Data.Value)
    pub struct Value {
        // message oneof groups
        pub value_type: ::std::option::Option<value::Value_type>,
        // special fields
        // @@protoc_insertion_point(special_field:Data.Value.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Value {
        fn default() -> &'a Value {
            <Value as ::protobuf::Message>::default_instance()
        }
    }

    impl Value {
        pub fn new() -> Value {
            ::std::default::Default::default()
        }

        // optional string string_value = 1;

        pub fn string_value(&self) -> &str {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::StringValue(ref v)) => v,
                _ => "",
            }
        }

        pub fn clear_string_value(&mut self) {
            self.value_type = ::std::option::Option::None;
        }

        pub fn has_string_value(&self) -> bool {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::StringValue(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_string_value(&mut self, v: ::std::string::String) {
            self.value_type = ::std::option::Option::Some(value::Value_type::StringValue(v))
        }

        // Mutable pointer to the field.
        pub fn mut_string_value(&mut self) -> &mut ::std::string::String {
            if let ::std::option::Option::Some(value::Value_type::StringValue(_)) = self.value_type {
            } else {
                self.value_type = ::std::option::Option::Some(value::Value_type::StringValue(::std::string::String::new()));
            }
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::StringValue(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_string_value(&mut self) -> ::std::string::String {
            if self.has_string_value() {
                match self.value_type.take() {
                    ::std::option::Option::Some(value::Value_type::StringValue(v)) => v,
                    _ => panic!(),
                }
            } else {
                ::std::string::String::new()
            }
        }

        // optional double double_value = 2;

        pub fn double_value(&self) -> f64 {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::DoubleValue(v)) => v,
                _ => 0.,
            }
        }

        pub fn clear_double_value(&mut self) {
            self.value_type = ::std::option::Option::None;
        }

        pub fn has_double_value(&self) -> bool {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::DoubleValue(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_double_value(&mut self, v: f64) {
            self.value_type = ::std::option::Option::Some(value::Value_type::DoubleValue(v))
        }

        // optional uint64 pos_int_value = 3;

        pub fn pos_int_value(&self) -> u64 {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::PosIntValue(v)) => v,
                _ => 0,
            }
        }

        pub fn clear_pos_int_value(&mut self) {
            self.value_type = ::std::option::Option::None;
        }

        pub fn has_pos_int_value(&self) -> bool {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::PosIntValue(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_pos_int_value(&mut self, v: u64) {
            self.value_type = ::std::option::Option::Some(value::Value_type::PosIntValue(v))
        }

        // optional uint64 neg_int_value = 4;

        pub fn neg_int_value(&self) -> u64 {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::NegIntValue(v)) => v,
                _ => 0,
            }
        }

        pub fn clear_neg_int_value(&mut self) {
            self.value_type = ::std::option::Option::None;
        }

        pub fn has_neg_int_value(&self) -> bool {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::NegIntValue(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_neg_int_value(&mut self, v: u64) {
            self.value_type = ::std::option::Option::Some(value::Value_type::NegIntValue(v))
        }

        // optional bool bool_value = 5;

        pub fn bool_value(&self) -> bool {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::BoolValue(v)) => v,
                _ => false,
            }
        }

        pub fn clear_bool_value(&mut self) {
            self.value_type = ::std::option::Option::None;
        }

        pub fn has_bool_value(&self) -> bool {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::BoolValue(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_bool_value(&mut self, v: bool) {
            self.value_type = ::std::option::Option::Some(value::Value_type::BoolValue(v))
        }

        // optional string json_value = 6;

        pub fn json_value(&self) -> &str {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::JsonValue(ref v)) => v,
                _ => "",
            }
        }

        pub fn clear_json_value(&mut self) {
            self.value_type = ::std::option::Option::None;
        }

        pub fn has_json_value(&self) -> bool {
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::JsonValue(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_json_value(&mut self, v: ::std::string::String) {
            self.value_type = ::std::option::Option::Some(value::Value_type::JsonValue(v))
        }

        // Mutable pointer to the field.
        pub fn mut_json_value(&mut self) -> &mut ::std::string::String {
            if let ::std::option::Option::Some(value::Value_type::JsonValue(_)) = self.value_type {
            } else {
                self.value_type = ::std::option::Option::Some(value::Value_type::JsonValue(::std::string::String::new()));
            }
            match self.value_type {
                ::std::option::Option::Some(value::Value_type::JsonValue(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_json_value(&mut self) -> ::std::string::String {
            if self.has_json_value() {
                match self.value_type.take() {
                    ::std::option::Option::Some(value::Value_type::JsonValue(v)) => v,
                    _ => panic!(),
                }
            } else {
                ::std::string::String::new()
            }
        }
    }

    impl ::protobuf::Message for Value {
        const NAME: &'static str = "Value";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.value_type = ::std::option::Option::Some(value::Value_type::StringValue(is.read_string()?));
                    },
                    17 => {
                        self.value_type = ::std::option::Option::Some(value::Value_type::DoubleValue(is.read_double()?));
                    },
                    24 => {
                        self.value_type = ::std::option::Option::Some(value::Value_type::PosIntValue(is.read_uint64()?));
                    },
                    32 => {
                        self.value_type = ::std::option::Option::Some(value::Value_type::NegIntValue(is.read_uint64()?));
                    },
                    40 => {
                        self.value_type = ::std::option::Option::Some(value::Value_type::BoolValue(is.read_bool()?));
                    },
                    50 => {
                        self.value_type = ::std::option::Option::Some(value::Value_type::JsonValue(is.read_string()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.value_type {
                match v {
                    &value::Value_type::StringValue(ref v) => {
                        my_size += ::protobuf::rt::string_size(1, &v);
                    },
                    &value::Value_type::DoubleValue(v) => {
                        my_size += 1 + 8;
                    },
                    &value::Value_type::PosIntValue(v) => {
                        my_size += ::protobuf::rt::uint64_size(3, v);
                    },
                    &value::Value_type::NegIntValue(v) => {
                        my_size += ::protobuf::rt::uint64_size(4, v);
                    },
                    &value::Value_type::BoolValue(v) => {
                        my_size += 1 + 1;
                    },
                    &value::Value_type::JsonValue(ref v) => {
                        my_size += ::protobuf::rt::string_size(6, &v);
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.value_type {
                match v {
                    &value::Value_type::StringValue(ref v) => {
                        os.write_string(1, v)?;
                    },
                    &value::Value_type::DoubleValue(v) => {
                        os.write_double(2, v)?;
                    },
                    &value::Value_type::PosIntValue(v) => {
                        os.write_uint64(3, v)?;
                    },
                    &value::Value_type::NegIntValue(v) => {
                        os.write_uint64(4, v)?;
                    },
                    &value::Value_type::BoolValue(v) => {
                        os.write_bool(5, v)?;
                    },
                    &value::Value_type::JsonValue(ref v) => {
                        os.write_string(6, v)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Value {
            Value::new()
        }

        fn clear(&mut self) {
            self.value_type = ::std::option::Option::None;
            self.value_type = ::std::option::Option::None;
            self.value_type = ::std::option::Option::None;
            self.value_type = ::std::option::Option::None;
            self.value_type = ::std::option::Option::None;
            self.value_type = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Value {
            static instance: Value = Value {
                value_type: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    /// Nested message and enums of message `Value`
    pub mod value {

        #[derive(Clone,PartialEq,Debug)]
        #[non_exhaustive]
        // @@protoc_insertion_point(oneof:Data.Value.value_type)
        pub enum Value_type {
            // @@protoc_insertion_point(oneof_field:Data.Value.string_value)
            StringValue(::std::string::String),
            // @@protoc_insertion_point(oneof_field:Data.Value.double_value)
            DoubleValue(f64),
            // @@protoc_insertion_point(oneof_field:Data.Value.pos_int_value)
            PosIntValue(u64),
            // @@protoc_insertion_point(oneof_field:Data.Value.neg_int_value)
            NegIntValue(u64),
            // @@protoc_insertion_point(oneof_field:Data.Value.bool_value)
            BoolValue(bool),
            // @@protoc_insertion_point(oneof_field:Data.Value.json_value)
            JsonValue(::std::string::String),
        }

        impl ::protobuf::Oneof for Value_type {
        }

        impl Value_type {
        }
    }
}
