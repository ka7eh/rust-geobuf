// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `protos/geobuf.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Data {
    // message fields
    keys: ::protobuf::RepeatedField<::std::string::String>,
    dimensions: ::std::option::Option<u32>,
    precision: ::std::option::Option<u32>,
    // message oneof groups
    pub data_type: ::std::option::Option<Data_oneof_data_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Data {
    fn default() -> &'a Data {
        <Data as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Data_oneof_data_type {
    feature_collection(Data_FeatureCollection),
    feature(Data_Feature),
    geometry(Data_Geometry),
}

impl Data {
    pub fn new() -> Data {
        ::std::default::Default::default()
    }

    // repeated string keys = 1;


    pub fn get_keys(&self) -> &[::std::string::String] {
        &self.keys
    }
    pub fn clear_keys(&mut self) {
        self.keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_keys(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keys(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.keys
    }

    // Take field
    pub fn take_keys(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.keys, ::protobuf::RepeatedField::new())
    }

    // optional uint32 dimensions = 2;


    pub fn get_dimensions(&self) -> u32 {
        self.dimensions.unwrap_or(2u32)
    }
    pub fn clear_dimensions(&mut self) {
        self.dimensions = ::std::option::Option::None;
    }

    pub fn has_dimensions(&self) -> bool {
        self.dimensions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dimensions(&mut self, v: u32) {
        self.dimensions = ::std::option::Option::Some(v);
    }

    // optional uint32 precision = 3;


    pub fn get_precision(&self) -> u32 {
        self.precision.unwrap_or(6u32)
    }
    pub fn clear_precision(&mut self) {
        self.precision = ::std::option::Option::None;
    }

    pub fn has_precision(&self) -> bool {
        self.precision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_precision(&mut self, v: u32) {
        self.precision = ::std::option::Option::Some(v);
    }

    // optional .Data.FeatureCollection feature_collection = 4;


    pub fn get_feature_collection(&self) -> &Data_FeatureCollection {
        match self.data_type {
            ::std::option::Option::Some(Data_oneof_data_type::feature_collection(ref v)) => v,
            _ => Data_FeatureCollection::default_instance(),
        }
    }
    pub fn clear_feature_collection(&mut self) {
        self.data_type = ::std::option::Option::None;
    }

    pub fn has_feature_collection(&self) -> bool {
        match self.data_type {
            ::std::option::Option::Some(Data_oneof_data_type::feature_collection(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_feature_collection(&mut self, v: Data_FeatureCollection) {
        self.data_type = ::std::option::Option::Some(Data_oneof_data_type::feature_collection(v))
    }

    // Mutable pointer to the field.
    pub fn mut_feature_collection(&mut self) -> &mut Data_FeatureCollection {
        if let ::std::option::Option::Some(Data_oneof_data_type::feature_collection(_)) = self.data_type {
        } else {
            self.data_type = ::std::option::Option::Some(Data_oneof_data_type::feature_collection(Data_FeatureCollection::new()));
        }
        match self.data_type {
            ::std::option::Option::Some(Data_oneof_data_type::feature_collection(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_feature_collection(&mut self) -> Data_FeatureCollection {
        if self.has_feature_collection() {
            match self.data_type.take() {
                ::std::option::Option::Some(Data_oneof_data_type::feature_collection(v)) => v,
                _ => panic!(),
            }
        } else {
            Data_FeatureCollection::new()
        }
    }

    // optional .Data.Feature feature = 5;


    pub fn get_feature(&self) -> &Data_Feature {
        match self.data_type {
            ::std::option::Option::Some(Data_oneof_data_type::feature(ref v)) => v,
            _ => Data_Feature::default_instance(),
        }
    }
    pub fn clear_feature(&mut self) {
        self.data_type = ::std::option::Option::None;
    }

    pub fn has_feature(&self) -> bool {
        match self.data_type {
            ::std::option::Option::Some(Data_oneof_data_type::feature(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_feature(&mut self, v: Data_Feature) {
        self.data_type = ::std::option::Option::Some(Data_oneof_data_type::feature(v))
    }

    // Mutable pointer to the field.
    pub fn mut_feature(&mut self) -> &mut Data_Feature {
        if let ::std::option::Option::Some(Data_oneof_data_type::feature(_)) = self.data_type {
        } else {
            self.data_type = ::std::option::Option::Some(Data_oneof_data_type::feature(Data_Feature::new()));
        }
        match self.data_type {
            ::std::option::Option::Some(Data_oneof_data_type::feature(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_feature(&mut self) -> Data_Feature {
        if self.has_feature() {
            match self.data_type.take() {
                ::std::option::Option::Some(Data_oneof_data_type::feature(v)) => v,
                _ => panic!(),
            }
        } else {
            Data_Feature::new()
        }
    }

    // optional .Data.Geometry geometry = 6;


    pub fn get_geometry(&self) -> &Data_Geometry {
        match self.data_type {
            ::std::option::Option::Some(Data_oneof_data_type::geometry(ref v)) => v,
            _ => Data_Geometry::default_instance(),
        }
    }
    pub fn clear_geometry(&mut self) {
        self.data_type = ::std::option::Option::None;
    }

    pub fn has_geometry(&self) -> bool {
        match self.data_type {
            ::std::option::Option::Some(Data_oneof_data_type::geometry(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_geometry(&mut self, v: Data_Geometry) {
        self.data_type = ::std::option::Option::Some(Data_oneof_data_type::geometry(v))
    }

    // Mutable pointer to the field.
    pub fn mut_geometry(&mut self) -> &mut Data_Geometry {
        if let ::std::option::Option::Some(Data_oneof_data_type::geometry(_)) = self.data_type {
        } else {
            self.data_type = ::std::option::Option::Some(Data_oneof_data_type::geometry(Data_Geometry::new()));
        }
        match self.data_type {
            ::std::option::Option::Some(Data_oneof_data_type::geometry(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_geometry(&mut self) -> Data_Geometry {
        if self.has_geometry() {
            match self.data_type.take() {
                ::std::option::Option::Some(Data_oneof_data_type::geometry(v)) => v,
                _ => panic!(),
            }
        } else {
            Data_Geometry::new()
        }
    }
}

impl ::protobuf::Message for Data {
    fn is_initialized(&self) -> bool {
        if let Some(Data_oneof_data_type::feature_collection(ref v)) = self.data_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Data_oneof_data_type::feature(ref v)) = self.data_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Data_oneof_data_type::geometry(ref v)) = self.data_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.keys)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.dimensions = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.precision = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data_type = ::std::option::Option::Some(Data_oneof_data_type::feature_collection(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data_type = ::std::option::Option::Some(Data_oneof_data_type::feature(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data_type = ::std::option::Option::Some(Data_oneof_data_type::geometry(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.keys {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if let Some(v) = self.dimensions {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.precision {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.data_type {
            match v {
                &Data_oneof_data_type::feature_collection(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Data_oneof_data_type::feature(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Data_oneof_data_type::geometry(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.keys {
            os.write_string(1, &v)?;
        };
        if let Some(v) = self.dimensions {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.precision {
            os.write_uint32(3, v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.data_type {
            match v {
                &Data_oneof_data_type::feature_collection(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Data_oneof_data_type::feature(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Data_oneof_data_type::geometry(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Data {
        Data::new()
    }

    fn default_instance() -> &'static Data {
        static mut instance: ::protobuf::lazy::Lazy<Data> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Data::new)
        }
    }
}

impl ::protobuf::Clear for Data {
    fn clear(&mut self) {
        self.keys.clear();
        self.dimensions = ::std::option::Option::None;
        self.precision = ::std::option::Option::None;
        self.data_type = ::std::option::Option::None;
        self.data_type = ::std::option::Option::None;
        self.data_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Data {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Data_Feature {
    // message fields
    geometry: ::protobuf::SingularPtrField<Data_Geometry>,
    values: ::protobuf::RepeatedField<Data_Value>,
    properties: ::std::vec::Vec<u32>,
    custom_properties: ::std::vec::Vec<u32>,
    // message oneof groups
    pub id_type: ::std::option::Option<Data_Feature_oneof_id_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Data_Feature {
    fn default() -> &'a Data_Feature {
        <Data_Feature as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Data_Feature_oneof_id_type {
    id(::std::string::String),
    int_id(i64),
}

impl Data_Feature {
    pub fn new() -> Data_Feature {
        ::std::default::Default::default()
    }

    // required .Data.Geometry geometry = 1;


    pub fn get_geometry(&self) -> &Data_Geometry {
        self.geometry.as_ref().unwrap_or_else(|| Data_Geometry::default_instance())
    }
    pub fn clear_geometry(&mut self) {
        self.geometry.clear();
    }

    pub fn has_geometry(&self) -> bool {
        self.geometry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_geometry(&mut self, v: Data_Geometry) {
        self.geometry = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_geometry(&mut self) -> &mut Data_Geometry {
        if self.geometry.is_none() {
            self.geometry.set_default();
        }
        self.geometry.as_mut().unwrap()
    }

    // Take field
    pub fn take_geometry(&mut self) -> Data_Geometry {
        self.geometry.take().unwrap_or_else(|| Data_Geometry::new())
    }

    // optional string id = 11;


    pub fn get_id(&self) -> &str {
        match self.id_type {
            ::std::option::Option::Some(Data_Feature_oneof_id_type::id(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_id(&mut self) {
        self.id_type = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        match self.id_type {
            ::std::option::Option::Some(Data_Feature_oneof_id_type::id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id_type = ::std::option::Option::Some(Data_Feature_oneof_id_type::id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Data_Feature_oneof_id_type::id(_)) = self.id_type {
        } else {
            self.id_type = ::std::option::Option::Some(Data_Feature_oneof_id_type::id(::std::string::String::new()));
        }
        match self.id_type {
            ::std::option::Option::Some(Data_Feature_oneof_id_type::id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        if self.has_id() {
            match self.id_type.take() {
                ::std::option::Option::Some(Data_Feature_oneof_id_type::id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // optional sint64 int_id = 12;


    pub fn get_int_id(&self) -> i64 {
        match self.id_type {
            ::std::option::Option::Some(Data_Feature_oneof_id_type::int_id(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_int_id(&mut self) {
        self.id_type = ::std::option::Option::None;
    }

    pub fn has_int_id(&self) -> bool {
        match self.id_type {
            ::std::option::Option::Some(Data_Feature_oneof_id_type::int_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_int_id(&mut self, v: i64) {
        self.id_type = ::std::option::Option::Some(Data_Feature_oneof_id_type::int_id(v))
    }

    // repeated .Data.Value values = 13;


    pub fn get_values(&self) -> &[Data_Value] {
        &self.values
    }
    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::protobuf::RepeatedField<Data_Value>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::protobuf::RepeatedField<Data_Value> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::protobuf::RepeatedField<Data_Value> {
        ::std::mem::replace(&mut self.values, ::protobuf::RepeatedField::new())
    }

    // repeated uint32 properties = 14;


    pub fn get_properties(&self) -> &[u32] {
        &self.properties
    }
    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::std::vec::Vec<u32>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.properties, ::std::vec::Vec::new())
    }

    // repeated uint32 custom_properties = 15;


    pub fn get_custom_properties(&self) -> &[u32] {
        &self.custom_properties
    }
    pub fn clear_custom_properties(&mut self) {
        self.custom_properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom_properties(&mut self, v: ::std::vec::Vec<u32>) {
        self.custom_properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_custom_properties(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.custom_properties
    }

    // Take field
    pub fn take_custom_properties(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.custom_properties, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Data_Feature {
    fn is_initialized(&self) -> bool {
        if self.geometry.is_none() {
            return false;
        }
        for v in &self.geometry {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.values {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.geometry)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.id_type = ::std::option::Option::Some(Data_Feature_oneof_id_type::id(is.read_string()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.id_type = ::std::option::Option::Some(Data_Feature_oneof_id_type::int_id(is.read_sint64()?));
                },
                13 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.values)?;
                },
                14 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.properties)?;
                },
                15 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.custom_properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.geometry.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.properties.is_empty() {
            my_size += ::protobuf::rt::vec_packed_varint_size(14, &self.properties);
        }
        if !self.custom_properties.is_empty() {
            my_size += ::protobuf::rt::vec_packed_varint_size(15, &self.custom_properties);
        }
        if let ::std::option::Option::Some(ref v) = self.id_type {
            match v {
                &Data_Feature_oneof_id_type::id(ref v) => {
                    my_size += ::protobuf::rt::string_size(11, &v);
                },
                &Data_Feature_oneof_id_type::int_id(v) => {
                    my_size += ::protobuf::rt::value_varint_zigzag_size(12, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.geometry.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.values {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.properties.is_empty() {
            os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            // TODO: Data size is computed again, it should be cached
            os.write_raw_varint32(::protobuf::rt::vec_packed_varint_data_size(&self.properties))?;
            for v in &self.properties {
                os.write_uint32_no_tag(*v)?;
            };
        }
        if !self.custom_properties.is_empty() {
            os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            // TODO: Data size is computed again, it should be cached
            os.write_raw_varint32(::protobuf::rt::vec_packed_varint_data_size(&self.custom_properties))?;
            for v in &self.custom_properties {
                os.write_uint32_no_tag(*v)?;
            };
        }
        if let ::std::option::Option::Some(ref v) = self.id_type {
            match v {
                &Data_Feature_oneof_id_type::id(ref v) => {
                    os.write_string(11, v)?;
                },
                &Data_Feature_oneof_id_type::int_id(v) => {
                    os.write_sint64(12, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Data_Feature {
        Data_Feature::new()
    }

    fn default_instance() -> &'static Data_Feature {
        static mut instance: ::protobuf::lazy::Lazy<Data_Feature> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Data_Feature::new)
        }
    }
}

impl ::protobuf::Clear for Data_Feature {
    fn clear(&mut self) {
        self.geometry.clear();
        self.id_type = ::std::option::Option::None;
        self.id_type = ::std::option::Option::None;
        self.values.clear();
        self.properties.clear();
        self.custom_properties.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Data_Feature {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Data_Geometry {
    // message fields
    field_type: ::std::option::Option<Data_Geometry_Type>,
    lengths: ::std::vec::Vec<u32>,
    coords: ::std::vec::Vec<i64>,
    geometries: ::protobuf::RepeatedField<Data_Geometry>,
    values: ::protobuf::RepeatedField<Data_Value>,
    custom_properties: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Data_Geometry {
    fn default() -> &'a Data_Geometry {
        <Data_Geometry as ::protobuf::Message>::default_instance()
    }
}

impl Data_Geometry {
    pub fn new() -> Data_Geometry {
        ::std::default::Default::default()
    }

    // required .Data.Geometry.Type type = 1;


    pub fn get_field_type(&self) -> Data_Geometry_Type {
        self.field_type.unwrap_or(Data_Geometry_Type::POINT)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Data_Geometry_Type) {
        self.field_type = ::std::option::Option::Some(v);
    }

    // repeated uint32 lengths = 2;


    pub fn get_lengths(&self) -> &[u32] {
        &self.lengths
    }
    pub fn clear_lengths(&mut self) {
        self.lengths.clear();
    }

    // Param is passed by value, moved
    pub fn set_lengths(&mut self, v: ::std::vec::Vec<u32>) {
        self.lengths = v;
    }

    // Mutable pointer to the field.
    pub fn mut_lengths(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.lengths
    }

    // Take field
    pub fn take_lengths(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.lengths, ::std::vec::Vec::new())
    }

    // repeated sint64 coords = 3;


    pub fn get_coords(&self) -> &[i64] {
        &self.coords
    }
    pub fn clear_coords(&mut self) {
        self.coords.clear();
    }

    // Param is passed by value, moved
    pub fn set_coords(&mut self, v: ::std::vec::Vec<i64>) {
        self.coords = v;
    }

    // Mutable pointer to the field.
    pub fn mut_coords(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.coords
    }

    // Take field
    pub fn take_coords(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.coords, ::std::vec::Vec::new())
    }

    // repeated .Data.Geometry geometries = 4;


    pub fn get_geometries(&self) -> &[Data_Geometry] {
        &self.geometries
    }
    pub fn clear_geometries(&mut self) {
        self.geometries.clear();
    }

    // Param is passed by value, moved
    pub fn set_geometries(&mut self, v: ::protobuf::RepeatedField<Data_Geometry>) {
        self.geometries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_geometries(&mut self) -> &mut ::protobuf::RepeatedField<Data_Geometry> {
        &mut self.geometries
    }

    // Take field
    pub fn take_geometries(&mut self) -> ::protobuf::RepeatedField<Data_Geometry> {
        ::std::mem::replace(&mut self.geometries, ::protobuf::RepeatedField::new())
    }

    // repeated .Data.Value values = 13;


    pub fn get_values(&self) -> &[Data_Value] {
        &self.values
    }
    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::protobuf::RepeatedField<Data_Value>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::protobuf::RepeatedField<Data_Value> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::protobuf::RepeatedField<Data_Value> {
        ::std::mem::replace(&mut self.values, ::protobuf::RepeatedField::new())
    }

    // repeated uint32 custom_properties = 15;


    pub fn get_custom_properties(&self) -> &[u32] {
        &self.custom_properties
    }
    pub fn clear_custom_properties(&mut self) {
        self.custom_properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom_properties(&mut self, v: ::std::vec::Vec<u32>) {
        self.custom_properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_custom_properties(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.custom_properties
    }

    // Take field
    pub fn take_custom_properties(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.custom_properties, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Data_Geometry {
    fn is_initialized(&self) -> bool {
        if self.field_type.is_none() {
            return false;
        }
        for v in &self.geometries {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.values {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.lengths)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_sint64_into(wire_type, is, &mut self.coords)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.geometries)?;
                },
                13 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.values)?;
                },
                15 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.custom_properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if !self.lengths.is_empty() {
            my_size += ::protobuf::rt::vec_packed_varint_size(2, &self.lengths);
        }
        if !self.coords.is_empty() {
            my_size += ::protobuf::rt::vec_packed_varint_zigzag_size(3, &self.coords);
        }
        for value in &self.geometries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.custom_properties.is_empty() {
            my_size += ::protobuf::rt::vec_packed_varint_size(15, &self.custom_properties);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, v.value())?;
        }
        if !self.lengths.is_empty() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            // TODO: Data size is computed again, it should be cached
            os.write_raw_varint32(::protobuf::rt::vec_packed_varint_data_size(&self.lengths))?;
            for v in &self.lengths {
                os.write_uint32_no_tag(*v)?;
            };
        }
        if !self.coords.is_empty() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            // TODO: Data size is computed again, it should be cached
            os.write_raw_varint32(::protobuf::rt::vec_packed_varint_zigzag_data_size(&self.coords))?;
            for v in &self.coords {
                os.write_sint64_no_tag(*v)?;
            };
        }
        for v in &self.geometries {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.values {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.custom_properties.is_empty() {
            os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            // TODO: Data size is computed again, it should be cached
            os.write_raw_varint32(::protobuf::rt::vec_packed_varint_data_size(&self.custom_properties))?;
            for v in &self.custom_properties {
                os.write_uint32_no_tag(*v)?;
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Data_Geometry {
        Data_Geometry::new()
    }

    fn default_instance() -> &'static Data_Geometry {
        static mut instance: ::protobuf::lazy::Lazy<Data_Geometry> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Data_Geometry::new)
        }
    }
}

impl ::protobuf::Clear for Data_Geometry {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.lengths.clear();
        self.coords.clear();
        self.geometries.clear();
        self.values.clear();
        self.custom_properties.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Data_Geometry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Data_Geometry_Type {
    POINT = 0,
    MULTIPOINT = 1,
    LINESTRING = 2,
    MULTILINESTRING = 3,
    POLYGON = 4,
    MULTIPOLYGON = 5,
    GEOMETRYCOLLECTION = 6,
}

impl ::protobuf::ProtobufEnum for Data_Geometry_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Data_Geometry_Type> {
        match value {
            0 => ::std::option::Option::Some(Data_Geometry_Type::POINT),
            1 => ::std::option::Option::Some(Data_Geometry_Type::MULTIPOINT),
            2 => ::std::option::Option::Some(Data_Geometry_Type::LINESTRING),
            3 => ::std::option::Option::Some(Data_Geometry_Type::MULTILINESTRING),
            4 => ::std::option::Option::Some(Data_Geometry_Type::POLYGON),
            5 => ::std::option::Option::Some(Data_Geometry_Type::MULTIPOLYGON),
            6 => ::std::option::Option::Some(Data_Geometry_Type::GEOMETRYCOLLECTION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Data_Geometry_Type] = &[
            Data_Geometry_Type::POINT,
            Data_Geometry_Type::MULTIPOINT,
            Data_Geometry_Type::LINESTRING,
            Data_Geometry_Type::MULTILINESTRING,
            Data_Geometry_Type::POLYGON,
            Data_Geometry_Type::MULTIPOLYGON,
            Data_Geometry_Type::GEOMETRYCOLLECTION,
        ];
        values
    }
}

impl ::std::marker::Copy for Data_Geometry_Type {
}

impl ::std::default::Default for Data_Geometry_Type {
    fn default() -> Self {
        Data_Geometry_Type::POINT
    }
}

impl ::protobuf::reflect::ProtobufValue for Data_Geometry_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Data_FeatureCollection {
    // message fields
    features: ::protobuf::RepeatedField<Data_Feature>,
    values: ::protobuf::RepeatedField<Data_Value>,
    custom_properties: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Data_FeatureCollection {
    fn default() -> &'a Data_FeatureCollection {
        <Data_FeatureCollection as ::protobuf::Message>::default_instance()
    }
}

impl Data_FeatureCollection {
    pub fn new() -> Data_FeatureCollection {
        ::std::default::Default::default()
    }

    // repeated .Data.Feature features = 1;


    pub fn get_features(&self) -> &[Data_Feature] {
        &self.features
    }
    pub fn clear_features(&mut self) {
        self.features.clear();
    }

    // Param is passed by value, moved
    pub fn set_features(&mut self, v: ::protobuf::RepeatedField<Data_Feature>) {
        self.features = v;
    }

    // Mutable pointer to the field.
    pub fn mut_features(&mut self) -> &mut ::protobuf::RepeatedField<Data_Feature> {
        &mut self.features
    }

    // Take field
    pub fn take_features(&mut self) -> ::protobuf::RepeatedField<Data_Feature> {
        ::std::mem::replace(&mut self.features, ::protobuf::RepeatedField::new())
    }

    // repeated .Data.Value values = 13;


    pub fn get_values(&self) -> &[Data_Value] {
        &self.values
    }
    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::protobuf::RepeatedField<Data_Value>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::protobuf::RepeatedField<Data_Value> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::protobuf::RepeatedField<Data_Value> {
        ::std::mem::replace(&mut self.values, ::protobuf::RepeatedField::new())
    }

    // repeated uint32 custom_properties = 15;


    pub fn get_custom_properties(&self) -> &[u32] {
        &self.custom_properties
    }
    pub fn clear_custom_properties(&mut self) {
        self.custom_properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom_properties(&mut self, v: ::std::vec::Vec<u32>) {
        self.custom_properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_custom_properties(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.custom_properties
    }

    // Take field
    pub fn take_custom_properties(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.custom_properties, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Data_FeatureCollection {
    fn is_initialized(&self) -> bool {
        for v in &self.features {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.values {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.features)?;
                },
                13 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.values)?;
                },
                15 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.custom_properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.features {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.custom_properties.is_empty() {
            my_size += ::protobuf::rt::vec_packed_varint_size(15, &self.custom_properties);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.features {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.values {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.custom_properties.is_empty() {
            os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            // TODO: Data size is computed again, it should be cached
            os.write_raw_varint32(::protobuf::rt::vec_packed_varint_data_size(&self.custom_properties))?;
            for v in &self.custom_properties {
                os.write_uint32_no_tag(*v)?;
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Data_FeatureCollection {
        Data_FeatureCollection::new()
    }

    fn default_instance() -> &'static Data_FeatureCollection {
        static mut instance: ::protobuf::lazy::Lazy<Data_FeatureCollection> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Data_FeatureCollection::new)
        }
    }
}

impl ::protobuf::Clear for Data_FeatureCollection {
    fn clear(&mut self) {
        self.features.clear();
        self.values.clear();
        self.custom_properties.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Data_FeatureCollection {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Data_Value {
    // message oneof groups
    pub value_type: ::std::option::Option<Data_Value_oneof_value_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Data_Value {
    fn default() -> &'a Data_Value {
        <Data_Value as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Data_Value_oneof_value_type {
    string_value(::std::string::String),
    double_value(f64),
    pos_int_value(u64),
    neg_int_value(u64),
    bool_value(bool),
    json_value(::std::string::String),
}

impl Data_Value {
    pub fn new() -> Data_Value {
        ::std::default::Default::default()
    }

    // optional string string_value = 1;


    pub fn get_string_value(&self) -> &str {
        match self.value_type {
            ::std::option::Option::Some(Data_Value_oneof_value_type::string_value(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_string_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_string_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Data_Value_oneof_value_type::string_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string_value(&mut self, v: ::std::string::String) {
        self.value_type = ::std::option::Option::Some(Data_Value_oneof_value_type::string_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string_value(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Data_Value_oneof_value_type::string_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Data_Value_oneof_value_type::string_value(::std::string::String::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Data_Value_oneof_value_type::string_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string_value(&mut self) -> ::std::string::String {
        if self.has_string_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Data_Value_oneof_value_type::string_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // optional double double_value = 2;


    pub fn get_double_value(&self) -> f64 {
        match self.value_type {
            ::std::option::Option::Some(Data_Value_oneof_value_type::double_value(v)) => v,
            _ => 0.,
        }
    }
    pub fn clear_double_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_double_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Data_Value_oneof_value_type::double_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_double_value(&mut self, v: f64) {
        self.value_type = ::std::option::Option::Some(Data_Value_oneof_value_type::double_value(v))
    }

    // optional uint64 pos_int_value = 3;


    pub fn get_pos_int_value(&self) -> u64 {
        match self.value_type {
            ::std::option::Option::Some(Data_Value_oneof_value_type::pos_int_value(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_pos_int_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_pos_int_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Data_Value_oneof_value_type::pos_int_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pos_int_value(&mut self, v: u64) {
        self.value_type = ::std::option::Option::Some(Data_Value_oneof_value_type::pos_int_value(v))
    }

    // optional uint64 neg_int_value = 4;


    pub fn get_neg_int_value(&self) -> u64 {
        match self.value_type {
            ::std::option::Option::Some(Data_Value_oneof_value_type::neg_int_value(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_neg_int_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_neg_int_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Data_Value_oneof_value_type::neg_int_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_neg_int_value(&mut self, v: u64) {
        self.value_type = ::std::option::Option::Some(Data_Value_oneof_value_type::neg_int_value(v))
    }

    // optional bool bool_value = 5;


    pub fn get_bool_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Data_Value_oneof_value_type::bool_value(v)) => v,
            _ => false,
        }
    }
    pub fn clear_bool_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_bool_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Data_Value_oneof_value_type::bool_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bool_value(&mut self, v: bool) {
        self.value_type = ::std::option::Option::Some(Data_Value_oneof_value_type::bool_value(v))
    }

    // optional string json_value = 6;


    pub fn get_json_value(&self) -> &str {
        match self.value_type {
            ::std::option::Option::Some(Data_Value_oneof_value_type::json_value(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_json_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_json_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Data_Value_oneof_value_type::json_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_json_value(&mut self, v: ::std::string::String) {
        self.value_type = ::std::option::Option::Some(Data_Value_oneof_value_type::json_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_json_value(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Data_Value_oneof_value_type::json_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Data_Value_oneof_value_type::json_value(::std::string::String::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Data_Value_oneof_value_type::json_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_json_value(&mut self) -> ::std::string::String {
        if self.has_json_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Data_Value_oneof_value_type::json_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for Data_Value {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Data_Value_oneof_value_type::string_value(is.read_string()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Data_Value_oneof_value_type::double_value(is.read_double()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Data_Value_oneof_value_type::pos_int_value(is.read_uint64()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Data_Value_oneof_value_type::neg_int_value(is.read_uint64()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Data_Value_oneof_value_type::bool_value(is.read_bool()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Data_Value_oneof_value_type::json_value(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.value_type {
            match v {
                &Data_Value_oneof_value_type::string_value(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &Data_Value_oneof_value_type::double_value(v) => {
                    my_size += 9;
                },
                &Data_Value_oneof_value_type::pos_int_value(v) => {
                    my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &Data_Value_oneof_value_type::neg_int_value(v) => {
                    my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &Data_Value_oneof_value_type::bool_value(v) => {
                    my_size += 2;
                },
                &Data_Value_oneof_value_type::json_value(ref v) => {
                    my_size += ::protobuf::rt::string_size(6, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.value_type {
            match v {
                &Data_Value_oneof_value_type::string_value(ref v) => {
                    os.write_string(1, v)?;
                },
                &Data_Value_oneof_value_type::double_value(v) => {
                    os.write_double(2, v)?;
                },
                &Data_Value_oneof_value_type::pos_int_value(v) => {
                    os.write_uint64(3, v)?;
                },
                &Data_Value_oneof_value_type::neg_int_value(v) => {
                    os.write_uint64(4, v)?;
                },
                &Data_Value_oneof_value_type::bool_value(v) => {
                    os.write_bool(5, v)?;
                },
                &Data_Value_oneof_value_type::json_value(ref v) => {
                    os.write_string(6, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Data_Value {
        Data_Value::new()
    }

    fn default_instance() -> &'static Data_Value {
        static mut instance: ::protobuf::lazy::Lazy<Data_Value> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Data_Value::new)
        }
    }
}

impl ::protobuf::Clear for Data_Value {
    fn clear(&mut self) {
        self.value_type = ::std::option::Option::None;
        self.value_type = ::std::option::Option::None;
        self.value_type = ::std::option::Option::None;
        self.value_type = ::std::option::Option::None;
        self.value_type = ::std::option::Option::None;
        self.value_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Data_Value {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}
